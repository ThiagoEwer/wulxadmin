Passo a passo de como foi feito esta porra.
Na pasta usuários foi feito esse crete table aqui:

//estrutura da tabela de usuários.//

CREATE TABLE usuarios (
  usu_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  usu_nome TEXT NOT NULL,
  usu_email TEXT NOT NULL,
  usu_telefone TEXT NOT NULL,
  usu_empresa TEXT NOT NULL,
  usu_cargo TEXT NOT NULL,
  usu_departamento TEXT NOT NULL,
  usu_nivel INTEGER NOT NULL,
  usu_bloqueado BOOLEAN NOT NULL
);

Funções do CRUD que funcionaram:
===================================================================================================================
--adicionar--
//função adiciona apesar do erro no terminal. 
  void _cadastrarUsuario(BuildContext context) async {
    if (_formKey.currentState!.validate()) {
      final newUser = {
        'usu_nome': _nomeController.text,
        'usu_email': _emailController.text,
        'usu_telefone': _telefoneController.text,
        'usu_empresa': _empresaController.text,
        'usu_cargo': _cargoController.text,
        'usu_departamento': _departamentoController.text,
        'usu_nivel': int.parse(_nivelController.text),
        'usu_bloqueado': _bloqueado,
      };

      try {
        final response = await supabase.from('usuarios').upsert([newUser]);
        if (response.error == null) {
          // Sucesso ao cadastrar usuário
          Navigator.of(context).pop(); // Fechar o Dialog de cadastro
          Navigator.of(context).pop(); // Voltar para a tela anterior
        } else {
          // Erro ao cadastrar usuário
          final errorMessage = response.error!.message;
          print('Erro ao cadastrar usuário: $errorMessage');
        }
      } catch (e) {
        // Erro ao cadastrar usuário
        final errorMessage = e.toString();
        print('Erro ao cadastrar usuário: $errorMessage');
      } finally {
        // Independente de sucesso ou erro, fechar o Dialog e voltar para a tela anterior
        Navigator.of(context).pop();
      }
    }
  }
==========================================================================================================================
  // excluir //
  void _excluirUsuario(BuildContext context, SupabaseClient supabase) async {
    // Exibir um AlertDialog de confirmação antes de excluir o usuário
    final result = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Excluir Usuário'),
        content: const Text('Tem certeza de que deseja excluir este usuário?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            child: const Text('Sim'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('Não'),
          ),
        ],
      ),
    );
  }
=============================================================================================================
 //mudar o status de bloqueado
  void _toggleUserStatus(Map<String, dynamic> user) async {
  final updatedUser = user;
  final blocked = user['usu_bloqueado'] ?? false;
  updatedUser['usu_bloqueado'] = !blocked;

  try {
    final response = await supabase
        .from('usuarios')
        .update(updatedUser)
        .match({'usu_id': user['usu_id']});

    if (response != null) {
      if (response.error != null) {
        // Trate o erro ao atualizar o usuário
        print('Erro ao atualizar o usuário: ${response.error}');
        return;
      }
    } else {
      // Trate o caso em que a resposta é nula
      print('Erro ao atualizar o usuário: resposta nula');
    }

    // Atualize a exibição do usuário com o novo status
    setState(() {
      user['usu_bloqueado'] = !blocked;
    });
  } catch (error) {
    // Trate o erro ao atualizar o usuário
    print('Erro ao atualizar o usuário: $error');
  }
}
